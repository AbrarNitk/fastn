use fastn_p1::Token;
use fastn_p1::Section;

grammar<'input>(input: &'input str);

pub Section: Box<Section> = {
    "--" " "? <s: Spanned<SectionName>> <f: Spanned<"()">?> ":" => Section::with_name(s, f),
};

Spanned<T>: fastn_p1::Span = {
    <l: @L> T <r: @R> => std::ops::Range{ start: l, end: r },
}

SectionName: () = {
    "word",
    SectionName " " "word",
}

extern {
  type Location = usize;
  type Error = ();

  enum Token {
    "escaped-comment" => Token::EscapedComment,
    "comment-line" => Token::CommentLine,
    "escaped-doc-comment" => Token::EscapedDocComment,
    "doc-comment-line" => Token::DocCommentLine,
    "--" => Token::DashDash,
    "word" => Token::Word,
    " " => Token::Space,
    "\n" => Token::EmptyLine,
    "()" => Token::FunctionMarker,
    ":" => Token::Colon,
    "escaped-dollar-curly" => Token::EscapedDollarCurly,
    "${" => Token::DollarCurly,
    "{" => Token::Curly,
    "}" => Token::CurlyClose,
    "$[" => Token::DollarSquare,
    "$$[" => Token::DoubleDollarSquare,
    "escaped-dollar-square" => Token::EscapedDollarSquare,
    "escaped-double-dollar-square" => Token::EscapedDoubleDollarSquare,
    "[" => Token::Square,
    "]" => Token::SquareClose,
  }
}